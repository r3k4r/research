// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String    @id @default(uuid())
  email            String    @unique
  password         String?
  role             Role      @default(USER)
  emailVerified    DateTime?
  twoFactorEnabled Boolean   @default(false)
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  accounts          Account[]
  profile           UserProfile?
  providerProfile   ProviderProfile?
  emailVerification EmailVerification?
  passwordReset     PasswordReset?
  twoFactorAuth     TwoFactorAuth?
}

model UserProfile {
  id          String  @id @default(uuid())
  userId      String  @unique
  name        String
  location    String?
  phoneNumber String?
  gender      String?
  image       String?

  user    User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  reviews Review[]
  orders  PurchasedOrder[]
}

model ProviderProfile {
  id            String  @id @default(uuid())
  name          String
  userId        String  @unique
  businessName  String
  description   String?
  address       String
  phoneNumber   String
  businessHours String?
  logo          String?
  raiting       Float   @default(0)

  user             User                     @relation(fields: [userId], references: [id], onDelete: Cascade)
  foodItems        FoodItem[]
  monthlySummaries ProviderMonthlySummary[]
  orders           PurchasedOrder[]
}

model Account {
  id                 String  @id @default(uuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model FoodItem {
  id              String         @id @default(uuid())
  name            String
  description     String
  price           Float
  discountedPrice Float
  quantity        Int
  image           String?
  categoryId      String
  providerId      String
  expiresAt       DateTime
  status          FoodItemStatus @default(ACTIVE)
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt

  category   Category        @relation(fields: [categoryId], references: [id])
  provider   ProviderProfile @relation(fields: [providerId], references: [id])
  reviews    Review[]
  dailySales DailySales[]
  orderItems OrderItem[]
}

model Category {
  id        String     @id @default(uuid())
  name      String     @unique
  foodItems FoodItem[]
}

model Review {
  id            String     @id @default(uuid())
  userProfileId String
  foodItemId    String
  rating        Int
  comment       String?
  type          ReviewType @default(ITEM)
  orderId       String? // Optional reference to the order
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt

  userProfile UserProfile     @relation(fields: [userProfileId], references: [id])
  foodItem    FoodItem        @relation(fields: [foodItemId], references: [id])
  order       PurchasedOrder? @relation(fields: [orderId], references: [id])
}

model DailySales {
  id         String   @id @default(uuid())
  foodItemId String
  date       DateTime
  quantity   Int
  revenue    Float
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  foodItem FoodItem @relation(fields: [foodItemId], references: [id])

  @@unique([foodItemId, date])
}

model ProviderMonthlySummary {
  id              String   @id @default(uuid())
  providerId      String
  month           DateTime
  totalSales      Int
  totalRevenue    Float
  averageRating   Float
  topSellingItems Json
  wasteReduction  Float
  carbonFootprint Float
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  provider ProviderProfile @relation(fields: [providerId], references: [id])

  @@unique([providerId, month])
}

model PurchasedOrder {
  id                 String      @id @default(uuid())
  userProfileId      String
  providerId         String
  status             OrderStatus @default(PENDING)
  totalAmount        Float
  deliveryAddress    String
  deliveryNotes      String?
  customerName       String?
  customerPhone      String?
  paymentMethod      String      @default("cash")
  deliveryPersonName String?
  estimatedDelivery  DateTime?
  viewedByProvider   Boolean     @default(false)
  createdAt          DateTime    @default(now())
  updatedAt          DateTime    @updatedAt
  isReviewed         Boolean     @default(false)

  userProfile UserProfile      @relation(fields: [userProfileId], references: [id])
  provider    ProviderProfile  @relation(fields: [providerId], references: [id])
  items       OrderItem[]
  statusLogs  OrderStatusLog[]
  reviews     Review[]
}

model OrderItem {
  id         String @id @default(uuid())
  orderId    String
  foodItemId String
  quantity   Int
  price      Float

  order    PurchasedOrder @relation(fields: [orderId], references: [id], onDelete: Cascade)
  foodItem FoodItem       @relation(fields: [foodItemId], references: [id])
}

model OrderStatusLog {
  id        String      @id @default(uuid())
  orderId   String
  status    OrderStatus
  notes     String?
  createdAt DateTime    @default(now())

  order PurchasedOrder @relation(fields: [orderId], references: [id], onDelete: Cascade)
}

model EmailVerification {
  id        String   @id @default(uuid())
  userId    String   @unique
  token     String   @unique
  expires   DateTime
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model PasswordReset {
  id        String   @id @default(uuid())
  userId    String   @unique
  token     String   @unique
  expires   DateTime
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model TwoFactorAuth {
  id        String   @id @default(uuid())
  userId    String   @unique
  code      String
  expires   DateTime
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum Role {
  USER
  PROVIDER
  ADMIN
}

enum OrderStatus {
  PENDING
  ACCEPTED
  PREPARING
  READY_FOR_PICKUP
  IN_TRANSIT
  DELIVERED
  CANCELLED
}

enum FoodItemStatus {
  ACTIVE
  SOLD
  EXPIRED
}

enum ReviewType {
  DELIVERY
  ITEM
  PREPARING
  OTHERS
}
