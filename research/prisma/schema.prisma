// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Base user model for authentication
model User {
  id               String    @id @default(uuid())
  email            String    @unique
  password         String?
  role             Role      @default(USER)
  emailVerified    DateTime?
  twoFactorEnabled Boolean   @default(false)
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  // Relations
  accounts        Account[]
  profile         UserProfile?
  providerProfile ProviderProfile?

  // New relations to token tables
  emailVerification EmailVerification?
  passwordReset     PasswordReset?
  twoFactorAuth     TwoFactorAuth?
}

// New model for email verification
model EmailVerification {
  id        String   @id @default(uuid())
  userId    String   @unique
  token     String   @unique
  expires   DateTime
  createdAt DateTime @default(now())

  // Relation to User
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// New model for password reset
model PasswordReset {
  id        String   @id @default(uuid())
  userId    String   @unique
  token     String   @unique
  expires   DateTime
  createdAt DateTime @default(now())

  // Relation to User
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// New model for two-factor authentication
model TwoFactorAuth {
  id        String   @id @default(uuid())
  userId    String   @unique
  code      String
  expires   DateTime
  createdAt DateTime @default(now())

  // Relation to User
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Separate profile for user details
model UserProfile {
  id          String  @id @default(uuid())
  userId      String  @unique
  name        String
  location    String?
  phoneNumber String?
  gender      String?
  image       String?

  // Relations
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  reviews Review[]
}

// Separate profile for provider details
model ProviderProfile {
  id            String  @id @default(uuid())
  userId        String  @unique
  businessName  String
  description   String?
  address       String
  phoneNumber   String
  businessHours String?
  logo          String?

  // Relations
  user             User                     @relation(fields: [userId], references: [id], onDelete: Cascade)
  foodItems        FoodItem[]
  monthlySummaries ProviderMonthlySummary[]
}

// OAuth accounts - keep as is for Google auth compatibility
model Account {
  id                 String  @id @default(uuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model FoodItem {
  id              String   @id @default(uuid())
  name            String
  description     String
  price           Float
  discountedPrice Float
  quantity        Int
  image           String?
  categoryId      String
  providerId      String
  expiresAt       DateTime
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  category   Category        @relation(fields: [categoryId], references: [id])
  provider   ProviderProfile @relation(fields: [providerId], references: [id])
  reviews    Review[]
  dailySales DailySales[]
}

model Category {
  id        String     @id @default(uuid())
  name      String     @unique
  foodItems FoodItem[]
}

model Review {
  id            String   @id @default(uuid())
  userProfileId String
  foodItemId    String
  rating        Int
  comment       String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  userProfile UserProfile @relation(fields: [userProfileId], references: [id])
  foodItem    FoodItem    @relation(fields: [foodItemId], references: [id])
}

model DailySales {
  id         String   @id @default(uuid())
  foodItemId String
  date       DateTime
  quantity   Int
  revenue    Float
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relations
  foodItem FoodItem @relation(fields: [foodItemId], references: [id])

  @@unique([foodItemId, date])
}

model ProviderMonthlySummary {
  id              String   @id @default(uuid())
  providerId      String
  month           DateTime
  totalSales      Int
  totalRevenue    Float
  averageRating   Float
  topSellingItems Json
  wasteReduction  Float
  carbonFootprint Float
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  provider ProviderProfile @relation(fields: [providerId], references: [id])

  @@unique([providerId, month])
}

enum Role {
  USER
  PROVIDER
  ADMIN
}

enum OrderStatus {
  SOLD
  EXPIRED
}
