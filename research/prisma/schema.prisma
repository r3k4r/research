// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                            String                   @id @default(uuid())
  name                          String?
  email                         String?                  @unique
  password                      String?
  location                      String?
  phoneNumber                   String?
  role                          Role                     @default(USER)
  gender                        String?
  image                         String?
  emailVerified                 DateTime?
  emailVerificationToken        String?
  emailVerificationTokenExpires DateTime?
  resetPasswordToken            String?
  resetPasswordExpires          DateTime?
  twoFactorEnabled              Boolean                  @default(false)
  twoFactorCode                 String?
  twoFactorCodeExpires          DateTime?
  createdAt                     DateTime                 @default(now())
  updatedAt                     DateTime                 @updatedAt
  accounts                      Account[]
  reviews                       Review[]
  foodItems                     FoodItem[] // For providers
  monthlySummaries              ProviderMonthlySummary[] // New relationship
}

model Account {
  id                 String  @id @default(uuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model FoodItem {
  id              String       @id @default(uuid())
  name            String
  description     String
  price           Float
  discountedPrice Float
  quantity        Int
  image           String?
  category        Category     @relation(fields: [categoryId], references: [id])
  categoryId      String
  provider        User         @relation(fields: [providerId], references: [id])
  providerId      String
  expiresAt       DateTime
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  reviews         Review[]
  dailySales      DailySales[]
}

model Category {
  id        String     @id @default(uuid())
  name      String     @unique
  foodItems FoodItem[]
}

model Review {
  id         String   @id @default(uuid())
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  foodItem   FoodItem @relation(fields: [foodItemId], references: [id])
  foodItemId String
  rating     Int
  comment    String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model DailySales {
  id         String   @id @default(uuid())
  foodItem   FoodItem @relation(fields: [foodItemId], references: [id])
  foodItemId String
  date       DateTime
  quantity   Int
  revenue    Float
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([foodItemId, date])
}

model ProviderMonthlySummary {
  id              String   @id @default(uuid())
  provider        User     @relation(fields: [providerId], references: [id])
  providerId      String
  month           DateTime
  totalSales      Int
  totalRevenue    Float
  averageRating   Float
  topSellingItems Json // Store as JSON array of item IDs and quantities
  wasteReduction  Float // Amount of food waste reduced (in kg or lbs)
  carbonFootprint Float // Estimated carbon footprint reduction
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@unique([providerId, month])
}

enum Role {
  USER
  PROVIDER
  ADMIN
}

enum OrderStatus {
  SOLD
  EXPIRED
}
